#!/usr/bin/env python3
"""
–ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ó–ê–ü–£–°–ö–ê SAR –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –°–ò–°–¢–ï–ú–´
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å MACD —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""

import os
import sys
import logging
from typing import Dict, Any
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('backtest.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    print("\n" + "="*80)
    print("üöÄ SAR –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –°–ò–°–¢–ï–ú–ê –° MACD –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô")
    print("="*80)
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {config.START_DATE} –¥–æ {config.END_DATE}")
    print(f"üíé –°–∏–º–≤–æ–ª—ã: {', '.join(config.SYMBOLS)}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {config.PRIMARY_TIMEFRAME}")
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(config.SYMBOLS)}")
    print("="*80)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import pandas
        import numpy
        import pybit
        import matplotlib
        import seaborn
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pandas numpy pybit matplotlib seaborn")
        return False

def generate_demo_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        from demo_data_generator import save_demo_data
        save_demo_data()
        
        logger.info("‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def run_backtest_analysis():
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ SAR –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å MACD —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
        from demo_backtest import run_demo_backtest
        run_demo_backtest()
        
        logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def show_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
    print("\n" + "="*80)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_files = [
        "backtest_results/sar_trades.json",
        "backtest_results/sar_backtest_charts.png",
        "backtest.log"
    ]
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file_path in results_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print("\nüìä –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: demo_data/")
    print("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑: backtest_results/")
    print("üìù –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: backtest.log")
    
    print("\n" + "="*80)
    print("üéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    print("="*80 + "\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return False
    
    try:
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not generate_demo_data():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        if not run_backtest_analysis():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
            return False
        
        # –®–∞–≥ 3: –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        show_results()
        
        return True
        
    except KeyboardInterrupt:
        logger.info("\nüõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    success = main()
    sys.exit(0 if success else 1)